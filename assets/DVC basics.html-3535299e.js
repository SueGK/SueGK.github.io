const e=JSON.parse(`{"key":"v-0689296f","path":"/MLOps/DVC/DVC%20basics.html","title":"Data Version Control","lang":"zh-CN","frontmatter":{"title":"Data Version Control","icon":"code","article":false,"description":"Data version 1. switch versions MtlffW Setting upa DVC pipeline git clone dvc init dvc exp init --live 'dvclive' \\\\ # set path to the directory where metrics and plots produced by DVCLive will be found --data 'data/MNIST' \\\\ # set path to data file --code 'train.py' \\\\ # set the path to the file or directory where the source code that your experiment depends on can be found (if any). --model 'model.pt' \\\\ # set the path to the file or directory where the model(s) produced by your experiment can be found (if any) --type 'checkpoint' \\\\ # selects the type of the stage to create. Currently it provides two alternatives: \\t\`checkpoint\` (supports logging [checkpoints](https://dvc.org/doc/command-reference/exp/run#checkpoints) during model training) \\t\`default\` (no need to specify this). python train.py","head":[["meta",{"property":"og:url","content":"https://newzone.top/MLOps/DVC/DVC%20basics.html"}],["meta",{"property":"og:site_name","content":"LearnData-开源笔记"}],["meta",{"property":"og:title","content":"Data Version Control"}],["meta",{"property":"og:description","content":"Data version 1. switch versions MtlffW Setting upa DVC pipeline git clone dvc init dvc exp init --live 'dvclive' \\\\ # set path to the directory where metrics and plots produced by DVCLive will be found --data 'data/MNIST' \\\\ # set path to data file --code 'train.py' \\\\ # set the path to the file or directory where the source code that your experiment depends on can be found (if any). --model 'model.pt' \\\\ # set the path to the file or directory where the model(s) produced by your experiment can be found (if any) --type 'checkpoint' \\\\ # selects the type of the stage to create. Currently it provides two alternatives: \\t\`checkpoint\` (supports logging [checkpoints](https://dvc.org/doc/command-reference/exp/run#checkpoints) during model training) \\t\`default\` (no need to specify this). python train.py"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:updated_time","content":"2023-01-04T05:27:45.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-04T05:27:45.000Z"}]]},"headers":[{"level":2,"title":"1. switch versions","slug":"_1-switch-versions","link":"#_1-switch-versions","children":[{"level":3,"title":"dvclive.next_step()","slug":"dvclive-next-step","link":"#dvclive-next-step","children":[]}]},{"level":2,"title":"Caching checkpoints","slug":"caching-checkpoints","link":"#caching-checkpoints","children":[]},{"level":2,"title":"Metrics diff","slug":"metrics-diff","link":"#metrics-diff","children":[]},{"level":2,"title":"Looking at plots","slug":"looking-at-plots","link":"#looking-at-plots","children":[]},{"level":2,"title":"dvc repro","slug":"dvc-repro","link":"#dvc-repro","children":[]}],"git":{"createdTime":1672808950000,"updatedTime":1672810065000,"contributors":[{"name":"SueGK","email":"71711489+SueGK@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":2.14,"words":642},"filePathRelative":"MLOps/DVC/DVC basics.md","localizedDate":"2023年1月4日","excerpt":"<h1> Data version</h1>\\n<h2> 1. switch versions</h2>\\n<figure><img src=\\"https://testksj.oss-cn-beijing.aliyuncs.com/uPic/MtlffW.png\\" alt=\\"MtlffW\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>MtlffW</figcaption></figure>\\n<h1> Setting upa DVC pipeline</h1>\\n<p>git clone\\ndvc init</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>dvc exp init <span class=\\"token parameter variable\\">--live</span> <span class=\\"token string\\">'dvclive'</span> <span class=\\"token punctuation\\">\\\\</span> \\n<span class=\\"token comment\\"># set path to the directory where metrics and plots produced by DVCLive will be found</span>\\n<span class=\\"token parameter variable\\">--data</span> <span class=\\"token string\\">'data/MNIST'</span> <span class=\\"token punctuation\\">\\\\</span> \\n<span class=\\"token comment\\"># set path to data file</span>\\n<span class=\\"token parameter variable\\">--code</span> <span class=\\"token string\\">'train.py'</span> <span class=\\"token punctuation\\">\\\\</span>\\n<span class=\\"token comment\\"># set the path to the file or directory where the source code that your experiment depends on can be found (if any).</span>\\n<span class=\\"token parameter variable\\">--model</span> <span class=\\"token string\\">'model.pt'</span> <span class=\\"token punctuation\\">\\\\</span>\\n<span class=\\"token comment\\"># set the path to the file or directory where the model(s) produced by your experiment can be found (if any)</span>\\n<span class=\\"token parameter variable\\">--type</span> <span class=\\"token string\\">'checkpoint'</span> <span class=\\"token punctuation\\">\\\\</span>\\n<span class=\\"token comment\\"># selects the type of the stage to create. Currently it provides two alternatives: </span>\\n\\t<span class=\\"token variable\\"><span class=\\"token variable\\">\`</span>checkpoint<span class=\\"token variable\\">\`</span></span> <span class=\\"token punctuation\\">(</span>supports logging <span class=\\"token punctuation\\">[</span>checkpoints<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>https://dvc.org/doc/command-reference/exp/run<span class=\\"token comment\\">#checkpoints) during model training)</span>\\n\\t<span class=\\"token variable\\"><span class=\\"token variable\\">\`</span>default<span class=\\"token variable\\">\`</span></span> <span class=\\"token punctuation\\">(</span>no need to specify this<span class=\\"token punctuation\\">)</span>.\\npython train.py\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
