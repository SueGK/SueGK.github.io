import{_ as t,Y as c,Z as d,$ as e,a0 as n,a1 as i,a2 as s,F as r}from"./framework-cd097da3.js";const o={},l=s(`<h1 id="data-version" tabindex="-1"><a class="header-anchor" href="#data-version" aria-hidden="true">#</a> Data version</h1><h2 id="_1-switch-versions" tabindex="-1"><a class="header-anchor" href="#_1-switch-versions" aria-hidden="true">#</a> 1. switch versions</h2><figure><img src="https://testksj.oss-cn-beijing.aliyuncs.com/uPic/MtlffW.png" alt="MtlffW" tabindex="0" loading="lazy"><figcaption>MtlffW</figcaption></figure><h1 id="setting-upa-dvc-pipeline" tabindex="-1"><a class="header-anchor" href="#setting-upa-dvc-pipeline" aria-hidden="true">#</a> Setting upa DVC pipeline</h1><p>git clone dvc init</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dvc exp init <span class="token parameter variable">--live</span> <span class="token string">&#39;dvclive&#39;</span> <span class="token punctuation">\\</span> 
<span class="token comment"># set path to the directory where metrics and plots produced by DVCLive will be found</span>
<span class="token parameter variable">--data</span> <span class="token string">&#39;data/MNIST&#39;</span> <span class="token punctuation">\\</span> 
<span class="token comment"># set path to data file</span>
<span class="token parameter variable">--code</span> <span class="token string">&#39;train.py&#39;</span> <span class="token punctuation">\\</span>
<span class="token comment"># set the path to the file or directory where the source code that your experiment depends on can be found (if any).</span>
<span class="token parameter variable">--model</span> <span class="token string">&#39;model.pt&#39;</span> <span class="token punctuation">\\</span>
<span class="token comment"># set the path to the file or directory where the model(s) produced by your experiment can be found (if any)</span>
<span class="token parameter variable">--type</span> <span class="token string">&#39;checkpoint&#39;</span> <span class="token punctuation">\\</span>
<span class="token comment"># selects the type of the stage to create. Currently it provides two alternatives: </span>
	<span class="token variable"><span class="token variable">\`</span>checkpoint<span class="token variable">\`</span></span> <span class="token punctuation">(</span>supports logging <span class="token punctuation">[</span>checkpoints<span class="token punctuation">]</span><span class="token punctuation">(</span>https://dvc.org/doc/command-reference/exp/run<span class="token comment">#checkpoints) during model training)</span>
	<span class="token variable"><span class="token variable">\`</span>default<span class="token variable">\`</span></span> <span class="token punctuation">(</span>no need to specify this<span class="token punctuation">)</span>.
python train.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://testksj.oss-cn-beijing.aliyuncs.com/uPic/enirtl.png" alt="enirtl" tabindex="0" loading="lazy"><figcaption>enirtl</figcaption></figure><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>git add .
$ git commit -m &quot;created DVC pipeline&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="registering-checkpoints-in-your-code" tabindex="-1"><a class="header-anchor" href="#registering-checkpoints-in-your-code" aria-hidden="true">#</a> Registering checkpoints in your code</h1><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> dvclive <span class="token keyword">import</span> Live

<span class="token comment"># lines added</span>
dvclive <span class="token operator">=</span> Live<span class="token punctuation">(</span><span class="token punctuation">)</span>
dvclile<span class="token punctuation">.</span>log<span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
dvcline<span class="token punctuation">.</span>next_step<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://testksj.oss-cn-beijing.aliyuncs.com/uPic/nmcbzJ.png" alt="nmcbzJ" tabindex="0" loading="lazy"><figcaption>nmcbzJ</figcaption></figure><h3 id="dvclive-next-step" tabindex="-1"><a class="header-anchor" href="#dvclive-next-step" aria-hidden="true">#</a> dvclive.next_step()</h3>`,12),p={href:"https://dvc.org/doc/dvclive/api-reference/live/next_step",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"Live.next_step()",-1),h=s(`<h1 id="running-experiments" tabindex="-1"><a class="header-anchor" href="#running-experiments" aria-hidden="true">#</a> Running experiments</h1><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>dvc exp run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),v={id:"caching-checkpoints",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#caching-checkpoints","aria-hidden":"true"},"#",-1),g={href:"https://dvc.org/doc/user-guide/experiment-management/checkpoints#caching-checkpoints",target:"_blank",rel:"noopener noreferrer"},b=s("<p>We can <mark>automatically push the checkpoints&#39; code &amp; data to your Git &amp; DVC remotes while an experiment is running</mark>. To enable this, two environment variables need to be set:</p><ul><li><code>DVC_EXP_AUTO_PUSH</code>: Enable auto push (<code>true</code>, <code>1</code>, <code>y</code>, <code>yes</code>)</li><li><code>DVC_EXP_GIT_REMOTE</code>: Git repository (can be a URL or a name such as <code>origin</code>, <code>myremote</code>, etc.)</li></ul>",2),f={href:"https://dvc.org/doc/command-reference/remote/default",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"dvc remote default",-1),x={href:"https://dvc.org/doc/command-reference/exp/push",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"dvc exp push",-1),y=s(`<p>⚠️ If either Git or DVC remotes are missing, the experiment will fail. However, if a checkpoint push doesn&#39;t succeed (due to rate limiting etc.) a warning will be printed, but the experiment will continue running as normal.</p><h1 id="viewing-checkpoints" tabindex="-1"><a class="header-anchor" href="#viewing-checkpoints" aria-hidden="true">#</a> Viewing checkpoints</h1><p>You can see a table of your experiments and checkpoints in the terminal by running:</p><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>$ dvc exp show
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="starting-from-an-existing-checkpoint" tabindex="-1"><a class="header-anchor" href="#starting-from-an-existing-checkpoint" aria-hidden="true">#</a> Starting from an existing checkpoint</h1><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>dvc exp apply 963b396
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Next, we&#39;ll change the learning rate set in the <em>params.yaml</em> to <code>0.000001</code> and start a new experiment based on an existing checkpoint with the following command:</p><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>$ dvc exp run --set-param lr=0.00001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="metrics-diff" tabindex="-1"><a class="header-anchor" href="#metrics-diff" aria-hidden="true">#</a> Metrics diff</h2><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>dvc metrics diff d90179a 726d32f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="looking-at-plots" tabindex="-1"><a class="header-anchor" href="#looking-at-plots" aria-hidden="true">#</a> Looking at plots</h2><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>dvc plots diff d90179a 726d32f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="resetting-checkpoints" tabindex="-1"><a class="header-anchor" href="#resetting-checkpoints" aria-hidden="true">#</a> Resetting checkpoints</h1><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>dvc exp run --reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="committing-checkpoints-to-git" tabindex="-1"><a class="header-anchor" href="#committing-checkpoints-to-git" aria-hidden="true">#</a> Committing checkpoints to Git</h1><p>We can also remove all of the experiments we don&#39;t promote to our Git workspace with the following command:</p><div class="language-dvc line-numbers-mode" data-ext="dvc"><pre class="language-dvc"><code>$ dvc exp gc --workspace --force
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="add-pipeline-stages-with-dvc-run" tabindex="-1"><a class="header-anchor" href="#add-pipeline-stages-with-dvc-run" aria-hidden="true">#</a> Add pipeline stages with dvc run</h1><figure><img src="https://testksj.oss-cn-beijing.aliyuncs.com/uPic/ICmTCJ.png" alt="ICmTCJ" tabindex="0" loading="lazy"><figcaption>ICmTCJ</figcaption></figure><p>Specify name for DVC stage, dependencies, outputs and stage parameters <img src="https://testksj.oss-cn-beijing.aliyuncs.com/uPic/G1GndX.png" alt="G1GndX" loading="lazy"><img src="https://testksj.oss-cn-beijing.aliyuncs.com/uPic/ULEaM9.png" alt="ULEaM9" loading="lazy"></p><h2 id="dvc-repro" tabindex="-1"><a class="header-anchor" href="#dvc-repro" aria-hidden="true">#</a> dvc repro</h2>`,21),w={href:"https://learn.iterative.ai/path-player?courseid=data-scientist-path&unit=61d37e4c600cf9501f632becUnit",target:"_blank",rel:"noopener noreferrer"};function C(V,D){const a=r("ExternalLinkIcon");return c(),d("div",null,[l,e("p",null,[n("The "),e("a",p,[u,i(a)]),n(" line tells DVC that it can take a snapshot of the entire workspace and version it with Git. It's important that with this approach only code with metadata is versioned in Git (as an ephemeral commit), while the actual model weight file will be stored in the DVC data cache.")]),h,e("h2",v,[m,n(),e("a",g,[n("Caching checkpoints"),i(a)])]),b,e("p",null,[n("Note that a "),e("a",f,[k,i(a)]),n(" is also needed so that the corresponding data can be pushed. With this configuration, "),e("a",x,[_,i(a)]),n(" will be done automatically after every iteration.")]),y,e("p",null,[e("a",w,[n("💪🏼 Practice - Reproduce end-to-end ML Pipelines"),i(a)]),n(" run dvc repro (assume we do this for 1st time) run dvc repro (no changes, DVC skips all stages) run dvc repro -f (force running ML pipeline) run dvc repro train (run only train stage from dvc.yaml) update train stage configs and run dvc repro update src/stage/train.py code and run dvc repro remove reports/metrics.json and run dvc repro")])])}const G=t(o,[["render",C],["__file","DVC basics.html.vue"]]);export{G as default};
